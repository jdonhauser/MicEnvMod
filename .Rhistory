installed.packages()
installed.packages()
installed.packages()
library(ecospat)
library(ade4)
data(aviurba)
View(aviurba)
aviurba
## Version using the sequential test (ter Braak et al 2012)
## as recommended in Dray et al (2013),
## using Holm correction of P-values (only 99 permutations here)
four.comb.default <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99)
summary(four.comb.default)
plot(four.comb.default, stat = "G")
## using fdr correction of P-values
four.comb.fdr <- fourthcorner(aviurba$mil, aviurba$fau, aviurba$traits,
nrepet = 99, p.adjust.method.G = 'fdr', p.adjust.method.D = 'fdr')
summary(four.comb.fdr)
plot(four.comb.fdr, stat = "G")
## Explicit procedure to combine the results of two models
## proposed in Dray and Legendre (2008);the above does this implicitly
four2 <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99,modeltype=2)
four4 <- fourthcorner(aviurba$mil,aviurba$fau,aviurba$traits,nrepet=99,modeltype=4)
four.comb <- combine.4thcorner(four2, four4)
summary(four.comb)
plot(four.comb, stat = "G")
View(four.comb)
four.comb
four.comb$tabD
four.comb$call
?fourthcorner
picante::phyEstimate()
picante::phyEstimate()
?picante::phyEstimate
?picante::phyEstimate
setwd("D:/postdocCopenhagen/rfunctions")
library(roxygen2)
vignette("rd")
list.files()
list.files(MicEnvMod)
list.files('./MicEnvMod')
# create file for citation
usethis::use_citation()
setwd('./MicEnvMod')
# create file for citation
usethis::use_citation()
devtools::document()
# install package
setwd("..")
devtools::install("MicEnvMod")
library(MicEnvMod)
citation(MicEnvMod)
citation('MicEnvMod')
?bibentry
devtools::install("MicEnvMod")
library(MicEnvMod)
citation("MicEnvMod")
devtools::install("MicEnvMod")
citation('MicEnvMod')
devtools::install("MicEnvMod")
library(MicEnvMod)
citation('MicEnvMod')
devtools::install("MicEnvMod")
?MicEnvMod::respMono
library(MicEnvMod)
# test if package dependencies work
data("mtcars")
View(mtcars)
?VarImpPlot.glm
?VarImp.glm
devtools::install("MicEnvMod")
library(MicEnvMod)
ls("package:MicEnvMod")
devtools::install("MicEnvMod")
library(MicEnvMod)
ls("package:MicEnvMod")
devtools::document()
rlang::last_trace()
# install package
setwd("..")
getwd()
setwd("D:/postdocCopenhagen/rfunctions")
devtools::document()
# set wd to directory of the package
setwd('./MicEnvMod')
devtools::document()
devtools::install("MicEnvMod")
# install package
setwd("..")
devtools::install("MicEnvMod")
library(MicEnvMod)
library(MicEnvMod)
?MicEnvMod::VarImp.glm
# test if package dependencies work
data("mtcars")
pred <- mtcars[,1:7]
resp <- as.data.frame(mtcars[,8])
colnames(mtcars)
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
glm
test <- VarImp.glm(glm, 100,T,plot.theme1)
getwd()
devtools::install("MicEnvMod")
library(MicEnvMod)
# test if package dependencies work
data("mtcars")
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,T,plot.theme1)
devtools::install("MicEnvMod")
library(MicEnvMod)
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,T,plot.theme1)
library(MicEnvMod)
# test if package dependencies work
data("mtcars")
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,T,plot.theme1)
getwd()
# set wd to directory of the package
setwd('./MicEnvMod')
# create manual pdf
devtools::build_manual()
rlang::last_trace()
?devtools::build_manual()
# create manual pdf
devtools::build_manual("MicEnvMod")
rlang::last_trace()
getwd()
# install package
setwd("..")
# create manual pdf
devtools::build_manual("./MicEnvMod")
library(devtools)
?check
getwd
()
getwd()
devtools::check(pkg='./MicEnvMod', manual=TRUE)
#this builds package and checks for problems, with manual =T
devtools::check(pkg='./MicEnvMod', manual=TRUE)
#this builds package and checks for problems, with manual =T
devtools::check(pkg='./MicEnvMod', manual=TRUE)
#this builds package and checks for problems, with manual =T
devtools::check(pkg='./MicEnvMod', manual=TRUE)
library(MicEnvMod)
citation('MicEnvMod')
# test if package dependencies work
data("mtcars")
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,T,plot.theme1)
?VarImp.glm
test <- VarImp.glm(glm, 100,plot = T,pt = plot.theme1)
pt = NULL
is.null(pt)
test <- VarImp.glm(glm, 100,plot = T)
gridExtra::grid.arrange(test)
gridExtra::grid.arrange(test$varImpPlot)
?grid.arrange
install.packages('pdflatex')
tinytex::install_tinytex()
getwd()
pack <- "MicEnvMod"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
#this builds package and checks for problems, with manual =T
devtools::check(pkg='./MicEnvMod', manual=TRUE)
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
grid.arrange(test$varImpPlot)
# set wd to directory of the package
setwd('./MicEnvMod')
devtools::document()
# create manual pdf
devtools::build_manual()
# install package
setwd("..")
#this builds package and checks for problems, with manual =T
devtools::check(pkg='./MicEnvMod', manual=TRUE)
library(MicEnvMod)
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
#this builds package and checks for problems, with manual =T , also builds the manual
devtools::check(pkg='./MicEnvMod', manual=TRUE)
library(tinytex)
pack <- "MicEnvMod"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(MicEnvMod)
citation('MicEnvMod')
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
devtools::install("MicEnvMod")
library(MicEnvMod)
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
reshape2::grid.arrange
gridExtra::grid.arrange()
devtools::document()
# set wd to directory of the package
setwd('./MicEnvMod')
devtools::document()
# install package
setwd("..")
devtools::install("MicEnvMod")
# test if functions work and if all dependencies work ************************************** ####
library(MicEnvMod)
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
sessionInfo()
getwd()
# set wd to directory of the package
setwd('./MicEnvMod')
# create documentation
devtools::document()
# install package
setwd("..")
devtools::install("MicEnvMod")
devtools::install("MicEnvMod")
devtools::install("MicEnvMod")
# test if functions work and if all dependencies work ************************************** ####
library(MicEnvMod)
citation('MicEnvMod')
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
devtools::install("MicEnvMod")
# test if functions work and if all dependencies work ************************************** ####
library(MicEnvMod)
citation('MicEnvMod')
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
# set wd to directory of the package
setwd('./MicEnvMod')
# create documentation
devtools::document()
# install package
setwd("..")
devtools::install("MicEnvMod")
# test if functions work and if all dependencies work ************************************** ####
library(MicEnvMod)
citation('MicEnvMod')
data("mtcars")
pr <- mtcars[,1:7]
re <- mtcars[,8:11]
glm <-glm(qsec ~mpg +cyl+disp+hp, data = mtcars)
test <- VarImp.glm(glm, 100,plot = T)
grid.arrange(test$varImpPlot)
sessionInfo()
plot.theme1 <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white",
colour = "black",
size = 0.5, linetype = "solid"),
panel.border= element_rect(fill=NA,size = 0.5, linetype = 'solid',colour = "black"),
axis.text.x = element_text(size=13),axis.text.y = element_text(size=13),legend.text = element_text(size=13),
axis.title = element_text(size=14),
legend.title = element_text(color = "black", size = 14),
strip.text.x = element_text(size=14),
strip.background = element_rect(colour="black", fill="white")
)
#this builds package and checks for problems, with manual =T , also builds the manual
devtools::check(pkg='./MicEnvMod', manual=TRUE)
class(glm)
use_mit_license()
# check model classes
full <- glm(re[,1] ~., data = pr, family = gaussian)
null <- glm(re[,1] ~1, data = pr, family = gaussian)
glmStep <- stepAIC(full, scope = list(upper = full, lower = null), direction = 'both')
# check model classes
library(MASS)
full <- glm(re[,1] ~., data = pr, family = gaussian)
null <- glm(re[,1] ~1, data = pr, family = gaussian)
glmStep <- stepAIC(full, scope = list(upper = full, lower = null), direction = 'both')
class(glmStep)
glmStep
#"glm" "lm"
library(randomForest)
MicEnvMod::margin
rf <- randomForest(x = pr, y = re[,1], ntree = 1000, importance = TRUE, nPerm = 100)
re[,1]
head(re)
rf <- randomForest(x = pr, y = re[,3], ntree = 1000, importance = TRUE, nPerm = 100)
class(rf)
class(test$varImpPlot)
?MASS::stepAIC
data(dunes)
usethis::use_gpl3_license()
# set wd to directory of the package
setwd('./MicEnvMod')
#create a license file
usethis::use_gpl3_license()
# create documentation
devtools::document()
#this builds package and checks for problems, with manual =T , also builds the manual
devtools::check(pkg='./MicEnvMod', manual=TRUE)
# install package
setwd("..")
#this builds package and checks for problems, with manual =T , also builds the manual
devtools::check(pkg='./MicEnvMod', manual=TRUE)
devtools::install("MicEnvMod")
# test if functions work and if all dependencies work ************************************** ####
library(MicEnvMod)
citation('MicEnvMod')
?crossVal
# set wd to directory of the package
setwd('./MicEnvMod')
# create documentation
devtools::document()
